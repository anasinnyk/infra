apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: github-golinter-
spec:
  serviceAccountName: argo
  entrypoint: linter-app
  onExit: exit
  arguments:
    parameters:
    - name: revision
      value: master
    - name: repository
      value: golang/example
    - name: branch
      value: master
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  templates:
  - name: exit
    steps:
    - - name: github-checks-success
        template: github-checks-success
        when: "'{{workflow.outputs.parameters.errors-tab}}' == ''"
    - - name: github-checks-failure
        template: github-checks-failure
        when: "'{{workflow.outputs.parameters.errors-tab}}' != ''"
  - name: linter-app
    steps:
    - - name: github-token
        template: github-token
    - - name: github-checks-in-progress
        template: github-checks-in-progress
        arguments:
          parameters:
          - name: token
            value: "{{steps.github-token.outputs.result}}"
    - - name: golangci-lint
        template: golangci-lint
  - name: github-token
    metadata:
      annotations:
        vault.security.banzaicloud.io/vault-addr: "https://vault-vault.vault.svc.cluster.local:8200"
        vault.security.banzaicloud.io/vault-role: "argo"
        vault.security.banzaicloud.io/vault-skip-verify: "true"
    outputs:
      parameters:
      - name: token
        valueFrom:
          path: /tmp/token
        globalName: token
    script:
      image: debian
      command: [bash]
      source: |
        apt update > /dev/null
        apt -y install jq openssl curl > /dev/null
        set -o pipefail

        header='{ "typ": "JWT", "alg": "RS256" }'
        payload() {
          jq -c --arg iat_str "$(date +%s)" \
          '($iat_str | tonumber) as $iat | .iat = $iat | .exp = (($iat + 600) | tonumber)' \
          <<<"{\"iss\": $APP_ID}" | tr -d '\n'
        }
        b64enc() { openssl enc -base64 -A | tr '+/' '-_' | tr -d '='; }
        json() { jq -c . | LC_CTYPE=C tr -d '\n'; }
        sign() { openssl dgst -binary -sha256 -sign <(printf '%s\n' "$1"); }

        signed_content="$(json <<<"$header" | b64enc).$(json <<<"$(payload)" | b64enc)"
        sig=$(printf %s "$signed_content" | sign "$GITHUB_PRIVATE_KEY" | b64enc)
        GITHUB_TOKEN=`printf '%s.%s\n' "${signed_content}" "${sig}"`

        curl -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.machine-man-preview+json" \
          https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens | jq .token > /tmp/token
      env:
      - name: APP_ID
        value: "23966"
      - name: INSTALLATION_ID
        value: "614449"
      - name: GITHUB_PRIVATE_KEY
        value: vault:secret/data/argo#GITHUB_PRIVATE_KEY
  - name: github-checks-in-progress
    script:
      image: appropriate/curl
      command: [sh]
      source: |
        payload() {
          printf '{
            "head_sha": "{{workflow.parameters.revision}}",
            "name": "argo/golang/lint",
            "status": "in_progress",
            "started_at": "%s"
          }' $(date +%Y-%m-%dT%H:%M:%SZ)
        }
        curl -X POST \
          -H "Authorization: token {{workflow.outputs.parameters.token}}" \
          -H "Accept: application/vnd.github.antiope-preview+json" \
          -d "$(payload)" \
          https://api.github.com/repos/{{workflow.parameters.repository}}/check-runs
  - name: github-checks-success
    script:
      image: appropriate/curl
      command: [sh]
      source: |
        payload() {
          printf '{
          	"head_sha": "{{workflow.parameters.revision}}",
          	"name": "argo/golang/lint",
          	"status": "completed",
            "conclusion": "success",
            "completed_at": "%s"
          }' $(date +%Y-%m-%dT%H:%M:%SZ)
        }
        curl -X POST \
          -H "Authorization: token {{workflow.outputs.parameters.token}}" \
          -H "Accept: application/vnd.github.antiope-preview+json" \
          -d "$(payload)" \
          https://api.github.com/repos/{{workflow.parameters.repository}}/check-runs
  - name: github-checks-failure
    script:
      image: appropriate/curl
      command: [sh]
      source: |
        payload() {
          printf '{
            "head_sha": "{{workflow.parameters.revision}}",
            "name": "argo/golang/lint",
            "status": "completed",
            "conclusion": "failure",
            "completed_at": "%s",
            "output": {
              "title": "GolangCI Lint",
              "summary": "{{workflow.outputs.parameters.errors-tab}}",
              "annotations": {{workflow.outputs.parameters.errors}}
            }
          }' $(date +%Y-%m-%dT%H:%M:%SZ)
        }

        curl -X POST \
          -H "Authorization: token {{workflow.outputs.parameters.token}}" \
          -H "Accept: application/vnd.github.antiope-preview+json" \
          -d "$(payload)" \
          https://api.github.com/repos/{{workflow.parameters.repository}}/check-runs
  - name: golangci-lint
    inputs:
      artifacts:
      - name: code
        path: /go/src/github.com/{{workflow.parameters.repository}}
        git:
          repo: "git@github.com:{{workflow.parameters.repository}}.git"
          revision: "{{workflow.parameters.revision}}"
          sshPrivateKeySecret:
            name: github-ssh
            key: ssh_prv
    outputs:
      parameters:
      - name: errors
        valueFrom:
          path: /tmp/errors.json
        globalName: errors
      - name: errors-tab
        valueFrom:
          path: /tmp/errors.tab
        globalName: errors-tab
    script:
      image: golangci/golangci-lint
      command: [sh]
      source: |
        apt update && apt install -y jq
        cd /go/src/github.com/{{workflow.parameters.repository}}
        go build .
        golangci-lint run --out-format json ./... > /tmp/errors.json
        golangci-lint run --out-format tab ./... > /tmp/errors.tab
        if [ -f "/tmp/errors.json" ] && [ -s "/tmp/errors.json" ]
        then
          echo "\n"

          res=$(cat /tmp/errors.json \
            | jq .Issues \
            | jq 'map(.+{"message": ("(" + .FromLinter + ") " + .Text)})' \
            | jq 'map(.+{"annotation_level": "failure"})' \
            | jq 'map(.+{"path": .Pos.Filename})' \
            | jq 'map(.+{"start_line": .Pos.Line})' \
            | jq 'map(.+{"end_line": .Pos.Line})' \
            | jq 'map(del(.FromLinter))' \
            | jq 'map(del(.Text))' \
            | jq 'map(del(.Pos))' \
            | jq 'map(del(.SourceLines))')

          echo $res > /tmp/errors.json
          echo $res
          cat /tmp/errors.json
        else
          echo "no errors"
        fi
      env:
      - name: GO111MODULE
        value: "on"
      volumeMounts:
      - name: workdir
        mountPath: /go/src/github.com/
